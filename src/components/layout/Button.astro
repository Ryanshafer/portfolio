---
const {
  href = null,
  cta,
  target = "_self",
  variant = "primary",
  type = "button",
  forceLight = false,
} = Astro.props;

const basePrimary = 'bg-black text-white hover:bg-black/80';
const baseOutline = 'border border-black text-base hover:bg-purewhite';
const darkPrimary = 'dark:bg-white dark:text-black dark:hover:bg-white/30 dark:hover:text-white';
const darkOutline = 'dark:border-white dark:text-white dark:hover:bg-white';

const primaryClasses = `${basePrimary}${forceLight ? '' : ` ${darkPrimary}`}`;
const outlineClasses = `${baseOutline}${forceLight ? '' : ` ${darkOutline}`}`;
---

{href ? (
  <div class="not-prose inline-flex">
    <a
      href={href}
      target={target}
      class={`inline-flex items-center justify-center rounded-full px-5 py-2 text-lg font-base whitespace-nowrap transition
        ${variant === 'primary' ? primaryClasses : ''}
        ${variant === 'outline' ? outlineClasses : ''}
        focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600 ${forceLight ? '' : 'dark:focus-visible:outline-primary-400'}`}
    >
      {cta}
    </a>
  </div>
) : (
  <button
    type={type}
    class={`inline-flex items-center justify-center rounded-full px-5 py-2 text-lg font-base whitespace-nowrap transition
      ${variant === 'primary' ? primaryClasses : ''}
      ${variant === 'outline' ? outlineClasses : ''}
      focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600 ${forceLight ? '' : 'dark:focus-visible:outline-primary-400'}`}
  >
    {cta}
  </button>
)}
