---
import CategoryPills from './CategoryPills.astro';

interface Props {
  heading: string;
  subheading?: string;
  categories?: string[];
  // Optional: control how category links render and where they point
  categoryBasePath?: string; // e.g. '/thoughts' or '/case-studies'
  categoryVariant?: 'links' | 'links-small' | 'chips';
  showBackgroundGraphic?: boolean;
}
const {
  heading,
  subheading,
  categories,
  categoryBasePath = '/thoughts',
  categoryVariant = 'links',
  showBackgroundGraphic = false,
} = Astro.props as Props;

const ellipseImages = ['ellipse-1.png', 'ellipse-2.png', 'ellipse-3.png'];
const randomEllipse = showBackgroundGraphic
  ? ellipseImages[Math.floor(Math.random() * ellipseImages.length)]
  : undefined;
// Sort categories alphabetically (case-insensitive)
const sortedCategories = Array.isArray(categories)
  ? [...categories].sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))
  : [];
const categoryHrefBase = `${categoryBasePath}/category`;
const resolvedCategoryVariant =
  categoryVariant === 'chips'
    ? 'chips'
    : categoryVariant === 'links-small'
    ? 'hashtags-sm'
    : 'hashtags';
const chipDarkHoverColor = randomEllipse ? 'black' : 'white';
---

<section class="page-header relative overflow-hidden bg-herowhite dark:bg-herodark">
  {randomEllipse && (
    <div class="page-header__bg-wrapper" aria-hidden="true">
      <div class="page-header__bg-ellipse">
        <img
          src={`/assets/ellipses/${randomEllipse}`}
          alt=""
          loading="eager"
          class="page-header__bg-image"
        />
      </div>
    </div>
  )}
<!-- HERO TEXT -->
<div class="relative z-10 mx-auto max-w-2xl px-4 sm:px-6 py-8 lg:py-[5.5rem]">
  <h1
    class={`overflow-visible text-center font-heading text-5xl font-black text-black ${
      randomEllipse ? '' : 'dark:text-white'
    } lg:text-[4.25rem] lg:leading-[4.25rem]`}
  >
    {heading}
  </h1>
  {subheading && (
    <p
      class={`my-1 text-center font-heading text-2xl leading-tight text-black/70 ${
        randomEllipse ? '' : 'dark:text-white'
      }`}
    >
      {subheading}
    </p>
  )}
  {sortedCategories.length > 0 && (
    <div x-data="{ expanded: false, hasOverflow: false, maxHeight: 0 }" class="relative">
      <CategoryPills
        categories={sortedCategories}
        basePath={categoryHrefBase}
        variant={resolvedCategoryVariant}
        wrapperClass={
          categoryVariant === 'chips'
            ? 'mx-auto max-w-2xl justify-center gap-3 py-2'
            : `mx-auto max-w-xl justify-center md:gap-y-1${randomEllipse ? '' : ' dark:text-white/50'}`
        }
        wrapperAttrs={{
          'x-ref': 'cats',
          ':class': "expanded ? '' : 'overflow-hidden'",
          ':style': "expanded ? '' : (`max-height: ${maxHeight}px`)",
        }}
        chipDarkHoverColor={categoryVariant === 'chips' ? chipDarkHoverColor : undefined}
      />
      <button 
        @click="expanded = !expanded"
        class="mt-4 mx-auto block text-sm text-black/70 hover:text-black"
        x-cloak
        x-show="hasOverflow"
        x-init="(() => {
          const compute = () => {
            if ($refs.cats) {
              const cs = getComputedStyle($refs.cats);
              const line = parseFloat(cs.lineHeight) || 28; // fallback ~1.75rem
              const rowGap = parseFloat(cs.rowGap) || 4;    // row gap between lines
              const paddingBlock = (parseFloat(cs.paddingTop) || 0) + (parseFloat(cs.paddingBottom) || 0);
              // Allow up to 2 rows fully visible. Include row gap and container padding.
              maxHeight = Math.round(line * 2 + rowGap + paddingBlock + 2);
              const sh = $refs.cats.scrollHeight;
              // Only show the toggle if actual content exceeds the two-line allowance
              hasOverflow = sh > (maxHeight + 2);
            }
          };
          compute();
          window.addEventListener('resize', compute);
          requestAnimationFrame(compute);
        })()"
      >
        <span x-text="expanded ? 'Show Less' : 'Show More'"></span>
        <span class="ml-1" x-text="expanded ? '↑' : '↓'"></span>
      </button>
    </div>
  )}
</div>
</section>
