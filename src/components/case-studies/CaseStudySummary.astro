---
// src/components/case-studies/CaseStudySummary.astro

import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
import CategoryPills from '../layout/CategoryPills.astro';
import { renderMarkdown } from '../../utils/markdown';

type RichContent = string | AstroComponentFactory;

type ResolvedContent =
  | { type: 'component'; component: AstroComponentFactory }
  | { type: 'html'; html: string };

export interface Props {
  role?: RichContent;
  problem?: RichContent;
  insight?: RichContent;
  approach?: RichContent;
  impact?: RichContent;
  categories?: Array<string | number>;
  stats?: {
    stat: string;
    label: string;
  }[];
}

const { role, problem, insight, approach, impact, categories = [], stats = [] } = Astro.props;

const resolveContent = async (value?: RichContent): Promise<ResolvedContent | undefined> => {
  if (!value) return undefined;
  if (typeof value === 'string') {
    const html = await renderMarkdown(value);
    return { type: 'html', html };
  }
  return { type: 'component', component: value };
};

const roleContent = await resolveContent(role);
const problemContent = await resolveContent(problem);
const insightContent = await resolveContent(insight);
const approachContent = await resolveContent(approach);
const impactContent = await resolveContent(impact);

const normalizedCategories = Array.isArray(categories) ? categories : [];

// if *all* of them are missing, render nothing
if (
  !(
    roleContent ||
    problemContent ||
    insightContent ||
    approachContent ||
    impactContent ||
    stats.length ||
    normalizedCategories.length
  )
) {
  return;
}

---

<section class="case-section">
  <div class="case-section__title top-16 mt-4">
    <h2 class="text-2xl-custom font-heading font-bold">At a glance</h2>
  </div>
  <div class="case-section__body flex flex-col space-y-6">
    {roleContent && (
      <div class="flex flex-col border-t border-black/30 pt-6 dark:border-white/50 lg:flex-row">
        <h3 class="mb-1 font-heading text-2xl lg:mb-0 lg:w-48 lg:mr-12">My Role</h3>
        <div class="flex-1 text-base font-bold lg:flex lg:items-center">
          {roleContent.type === 'component' ? (
            <roleContent.component />
          ) : (
            <div class="prose prose-summary max-w-none" set:html={roleContent.html} />
          )}
        </div>
      </div>
    )}
    {problemContent && (
      <div class="flex flex-col border-t border-black/30 pt-6 dark:border-white/50 lg:flex-row">
        <h3 class="mb-1 font-heading text-2xl lg:mb-0 lg:w-48 lg:mr-12">Problem</h3>
        <div class="flex-1 text-base">
          {problemContent.type === 'component' ? (
            <problemContent.component />
          ) : (
            <div class="prose prose-summary max-w-none" set:html={problemContent.html} />
          )}
        </div>
      </div>
    )}
    {insightContent && (
      <div class="flex flex-col border-t border-black/30 pt-6 dark:border-white/50 lg:flex-row">
        <h3 class="mb-1 font-heading text-2xl lg:mb-0 lg:w-48 lg:mr-12">Key Insight</h3>
        <div class="flex-1 text-base">
          {insightContent.type === 'component' ? (
            <insightContent.component />
          ) : (
            <div class="prose prose-summary max-w-none" set:html={insightContent.html} />
          )}
        </div>
      </div>
    )}
    {normalizedCategories.length > 0 && (
      <div class="flex flex-col border-t border-black/30 py-6 dark:border-white/50 lg:flex-row">
        <h3 class="mb-1 font-heading text-2xl lg:mb-0 lg:w-48 lg:mr-12">Skills Applied</h3>
        <div class="flex-1 text-base">
          <CategoryPills
            categories={normalizedCategories}
            variant="chips"
            wrapperClass="mt-2"
          />
        </div>
      </div>
    )}
    {approachContent && (
      <div class="flex flex-col border-t border-black/30 pt-6 dark:border-white/50 lg:flex-row">
        <h3 class="mb-1 font-heading text-2xl lg:mb-0 lg:w-48 lg:mr-12">Approach</h3>
        <div class="flex-1 text-base">
          {approachContent.type === 'component' ? (
            <approachContent.component />
          ) : (
            <div class="prose prose-summary max-w-none" set:html={approachContent.html} />
          )}
        </div>
      </div>
    )}
    {impactContent && (
      <div class="flex flex-col border-t border-black/30 pt-6 dark:border-white/50 lg:flex-row">
        <h3 class="mb-1 font-heading text-2xl lg:mb-0 lg:w-48 lg:mr-12">Impact</h3>
        <div class="flex-1 space-y-4">
          {impactContent.type === 'component' ? (
            <impactContent.component />
          ) : (
            <div class="prose prose-summary max-w-none" set:html={impactContent.html} />
          )}
          {stats.length > 0 && (
            <div class="grid grid-cols-1 gap-3">
              {stats.map((item) => (
                <div class="flex h-9 w-fit items-center rounded-lg border border-black/50 px-3 leading-none dark:border-white/50">
                  <span class="font-heading text-base font-bold text-black dark:text-white">{item.stat}</span>
                  <span class="ml-1 text-base">â€” {item.label}</span>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    )}
  </div>
</section>
