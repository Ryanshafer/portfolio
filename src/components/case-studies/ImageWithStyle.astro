---
// src/components/case-studies/ImageWithStyle.astro
import { Image } from 'astro:assets';

type ImageMetadataLike = {
  src: string;
  width: number;
  height: number;
  format?: 'png' | 'jpg' | 'jpeg' | 'webp' | 'avif' | 'gif';
};

type ImageSource = string | ImageMetadataLike;

interface Props {
  src: ImageSource;
  largeSrc?: ImageSource;
  alt?: string;
  className?: string;
  disableLightbox?: boolean;
}

const { src, largeSrc, alt = '', className = '', disableLightbox = false } = Astro.props as Props;

const toImageParts = (input?: ImageSource) => {
  if (!input) {
    return { meta: undefined, url: undefined } as const;
  }
  return typeof input === 'string'
    ? ({ meta: undefined, url: input } as const)
    : ({ meta: input, url: undefined } as const);
};

const displayImage = toImageParts(src);
const overlayImage = toImageParts(largeSrc ?? src);

const imageClass = [
  'w-full rounded transition-transform duration-300 ease-in-out my-0',
  !disableLightbox && 'group-hover:scale-110',
]
  .filter(Boolean)
  .join(' ');

const wrapperBaseClass = 'w-full overflow-hidden rounded-lg';
const buttonWrapperClass = `${wrapperBaseClass} group focus:outline-none`;
---

<figure
  class={`my-8 w-full ${className}`}
  x-data="{ open: false }"
  @keyup.escape.window="open = false"
>
  {disableLightbox ? (
    <div class={wrapperBaseClass}>
      {displayImage.meta ? (
        <Image
          src={displayImage.meta as any}
          alt={alt}
          class={imageClass}
          loading="lazy"
        />
      ) : (
        <img
          src={displayImage.url}
          alt={alt}
          class={imageClass}
          loading="lazy"
          decoding="async"
        />
      )}
    </div>
  ) : (
    <button type="button" class={buttonWrapperClass} @click="open = true">
      {displayImage.meta ? (
        <Image
          src={displayImage.meta as any}
          alt={alt}
          class={imageClass}
          loading="lazy"
        />
      ) : (
        <img
          src={displayImage.url}
          alt={alt}
          class={imageClass}
          loading="lazy"
          decoding="async"
        />
      )}
    </button>
  )}
  {alt && (
    <figcaption class="mt-2 text-sm text-black/70 dark:text-white/70 text-left">
      {alt}
    </figcaption>
  )}

  {!disableLightbox && (
    <div
      x-cloak
      x-show="open"
      x-transition.opacity
      class="fixed inset-0 z-40 flex items-center justify-center bg-darkerblack/70 backdrop-blur-[18px] px-4"
      role="dialog"
      aria-modal="true"
      @click.self="open = false"
    >
      <button
        type="button"
        class="absolute right-4 top-4 md:right-16 md:top-8 text-white text-4xl-custom font-bold focus:outline-none focus-visible:ring-2 focus-visible:ring-white"
        aria-label="Close image"
        @click="open = false"
      >
        Ã—
      </button>
      <div class="max-h-[100vh] max-w-5xl overflow-auto mt-12">
        {overlayImage.meta ? (
          <Image
            src={overlayImage.meta as any}
            alt={alt}
            class="h-auto w-full max-w-full rounded shadow-2xl"
            loading="lazy"
          />
        ) : (
          <img
            src={overlayImage.url}
            alt={alt}
            class="h-auto w-full max-w-full rounded shadow-2xl"
            loading="lazy"
            decoding="async"
          />
        )}
      </div>
    </div>
  )}
</figure>
