---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import ThoughtPreview from '../components/thoughts/ThoughtPreview.astro';
import PageHeader from '../components/layout/PageHeader.astro';

const posts = (await getCollection('thoughts')).sort(
  (a, b) => new Date(b.data?.pubDate ?? 0).getTime() - new Date(a.data?.pubDate ?? 0).getTime()
);

// Group posts by year
const postsByYear = posts.reduce((acc, post) => {
  const year = new Date(post.data.pubDate).getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof posts>);

// Sort years in descending order
const sortedYears = Object.keys(postsByYear).map(Number).sort((a, b) => b - a);

// Collect all unique categories
const categories = new Set<string>();
for (const post of posts) {
  for (const category of post.data.categories || []) {
    categories.add(category);
  }
}

// Build client-side pagination chunks (static HTML, toggled with Alpine)
const pageSize = 10; // adjust as needed
const chunks: typeof posts[] = [];
for (let i = 0; i < posts.length; i += pageSize) {
  chunks.push(posts.slice(i, i + pageSize));
}
const totalPages = chunks.length;
// Precompute year groupings for each chunk to avoid TS in the template
const chunkData = chunks.map((chunk) => {
  const byYear = chunk.reduce((acc, post) => {
    const year = new Date(post.data.pubDate).getFullYear();
    if (!acc[year]) acc[year] = [];
    acc[year].push(post);
    return acc;
  }, {} as Record<number, typeof posts>);
  const years = Object.keys(byYear).map(Number).sort((a, b) => b - a);
  return { byYear, years };
});
---

<Layout
  description="Learn about Ryan Shafer's past design work"
  title="Thoughts · Ryan Shafer · UX Design Leader"
>
  <PageHeader 
    heading="My Thoughts" 
    subheading="Writing about design, technology, and leadership." 
    categories={Array.from(categories)}
  />
  <section x-data={`{ page: 1, total: ${totalPages}, next(){ if(this.page < this.total) this.page++ }, prev(){ if(this.page > 1) this.page-- } }`} class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl mt-8">
    {chunkData.map((chunk, chunkIndex) => (
      <div x-show={`page === ${chunkIndex + 1}`} class="space-y-16">
        {chunk.years.map((year, yearIndex) => (
          <>
            <div class="space-y-8 md:space-y-11">
              <div class="sticky top-0 z-10 py-4 bg-gradient-to-b from-[#EFEDE6] via-[#EFEDE6]/80 to-transparent dark:from-[#1F1C30] dark:via-[#1F1C30] dark:to-transparent">
                <h2 class="border border-black dark:border-white rounded-lg px-3 h-9 w-fit mx-auto flex items-center leading-none text-base bg-white dark:bg-darkerblack">{year}</h2>
              </div>
              {chunk.byYear[year].map((post, index) => (
                <>
                  <ThoughtPreview post={post} />
                  {index < chunk.byYear[year].length - 1 && (
                    <hr class="mx-auto max-w-2xl border-black/10 dark:border-white/10" />
                  )}
                </>
              ))}
            </div>
            {yearIndex < chunk.years.length - 1 && (
              <hr class="border-black dark:border-white" />
            )}
          </>
        ))}
      </div>
    ))}

    {/* Pager */}
    {totalPages > 1 && (
      <nav class="mt-12 flex items-center justify-center gap-3" aria-label="Pagination">
        <button @click="prev()" :disabled="page === 1" class="rounded-md px-3 py-2 text-sm border border-black/20 dark:border-white/20 disabled:opacity-40">Prev</button>
        <div class="flex items-center gap-1">
          {Array.from({ length: totalPages }).map((_, i) => (
            <button @click={`page = ${i + 1}`} class="rounded-md px-3 py-2 text-sm border border-black/20 dark:border-white/20" :class={`page === ${i + 1} ? 'bg-black text-white dark:bg-white dark:text-black' : ''`}>
              {i + 1}
            </button>
          ))}
        </div>
        <button @click="next()" :disabled="page === total" class="rounded-md px-3 py-2 text-sm border border-black/20 dark:border-white/20 disabled:opacity-40">Next</button>
      </nav>
    )}
  </section>
</Layout>
